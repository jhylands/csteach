-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParIntExp where
import AbsIntExp
import LexIntExp
import ErrM

}

%name pIntExp IntExp
%name pIntExp1 IntExp1
%name pIntExp2 IntExp2

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  '-' { PT _ (TS _ 5) }

L_integ  { PT _ (TI $$) }
L_ident  { PT _ (TV $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Ident   :: { Ident }   : L_ident  { Ident $1 }

IntExp :: { IntExp }
IntExp : IntExp '+' IntExp1 { EAdd $1 $3 } 
  | '-' IntExp1 { EMin $2 }
  | IntExp1 { $1 }


IntExp1 :: { IntExp }
IntExp1 : IntExp1 '*' IntExp2 { EMul $1 $3 } 
  | IntExp2 { $1 }


IntExp2 :: { IntExp }
IntExp2 : Integer { Eint $1 } 
  | Ident { Evar $1 }
  | '(' IntExp ')' { $2 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

