#lang racket
(define (visit-doctor name)
  (begin
    (print (list 'hello name))
    (print '(what seems to be the trouble?))
    (doctor-driver-loop name '())))
(define (doctor-driver-loop name resp)
  (begin
    (newline)
    (display '**)
    (let ((user-response (read)))
      (if (equal? user-response '(goodbye))
                (begin
                   (print (list 'goodbye name))
                   (print '(see you next week))
                )
                (begin
                    (print (reply user-response resp))
                    (doctor-driver-loop name (cons user-response resp))
                )))))
(define (reply user-response resp)
  (pick-random '((append (qualifier) (change-person user-response))
                     (hedge)
                     (saided user-res ponse resp))
               )
  )

(define (fifty-fifty) (= (random 2) 0))
(define (qualifier)
  (pick-random '((you seem to think)
                 (you feel that)
                 (why do you believe)
                 (why do you say)
                 (do you really belive)
                 (in a universe both at peaice and full of suferign you really feel))))
(define (hedge)
  (pick-random
   '((please go on)
     (many people have the same sorts of feelings)
     (many of my patients have told me the same thing)
     (please continue)
     (you have no idea the implications that could have had))))
(define (replace pattern replacement lst)
  (cond ((null? lst) '())
        ((equal? (car lst) pattern)
                 (cons replacement
                       (replace pattern replacement (cdr lst)))
        )
        (else (cons (car lst)
                    (replace pattern replacement (cdr lst)))
        )))
(define (many-replace replacement-pairs lst)
  (if (null? replacement-pairs)
         lst
         (let ((pat-rep (car replacement-pairs)))
                (replace (car pat-rep)
                         (cadr pat-rep)
                         (many-replace (cdr replacement-pairs)
                                       lst)))))
(define (change-person phrase)
  (many-replace '((you i) (i you) (you me) (me you)  (am are) (are am) (my your))
                phrase))
(define (pick-random lst) (list-ref lst (random (length lst))))