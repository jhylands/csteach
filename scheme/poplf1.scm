(load "typed-values.scm")

(define (a-num-from-Rnum rx)
	(a-typed-value 'rnum rx)
)
(define (Rnum? rx)
	(eq? (type-of rx) 'rnum)
)
(define (num-Rnum rx)
	(value-of rx)
)
(define (signx-Rnum rx)
	(< (value-of rx) 0)
) 

(define (logx-Rnum rx)
	(log (abs (value-of rx)))
)
(define (logx-lognum lognum)
	(car (value-of lognum))
)
(define (signx-lognum lognum)
	(car (cdr (value-of lognum)))
)

(define (lognum? rx)
	(eq? (type-of rx) 'lognum)
)
(define (a-num-from-lognum logx signx)
	(a-typed-value 'lognum (list logx signx))
)

(define (num-lognum lognum)
	(if (car (cdr (value-of lognum))) (* -1 (exp (car (value-of lognum))))
				    	 (exp (car (value-of lognum)))
	)
)


;-------------------------------------------------------------------------------
(define (num number)
	(cond ((lognum? number) (num-lognum number))
	      ((Rnum? number) (num-Rnum number))
	)
)

(define (logx number)
	(cond ((lognum? number) (logx-lognum number))
	      ((Rnum? number) (logx-Rnum number))
	)
)

(define (signx number)
	(cond ((lognum? number) (signx-lognum number))
	      ((Rnum? number) (signx-Rnum number))
	)
)

(define (plus number1 number2)
	(a-num-from-Rnum (+ (num number1) (num number2)))
)

(define (minus number1 number2)
	(a-num-from-Rnum (- (num number1) (num number2)))
)
(define (times number1 number2)
	(a-num-from-lognum (+ (logx number1) (logx number2)) 
			      (not (eq? (signx number1) (signx number2)))
	)
)
(define (dev number1 number2)
	(a-num-from-lognum (- (logx number1) (logx number2)) 
			      (not (eq? (signx number1) (signx number2)))
	)
)

(define (calc expr)
	(if (list? expr)
		(case (car expr)
			((+) (plus (calc (cadr expr)) (calc (caddr expr))))
			((-) (minus (calc (cadr expr)) (calc (caddr expr))))
			((*) (times (calc (cadr expr)) (calc (caddr expr))))
			((/) (div (calc (cadr expr)) (calc (caddr expr))))
			(else (a-num-from-Rnum expr))
		)
	(a-num-from-Rnum expr)
	)
)
(define (calc1 expr)
	(if (list? expr)
		(case (cadr expr)
			((+) (plus (calc1 (car expr)) (calc1 (caddr expr))))
			((-) (minus (calc1 (car expr)) (calc1 (caddr expr))))
			((*) (times (calc1 (car expr)) (calc1 (caddr expr))))
			((/) (div (calc1 (car expr)) (calc1 (caddr expr))))
			(else (a-num-from-Rnum expr))
		)
	(a-num-from-Rnum expr)
	)
)
